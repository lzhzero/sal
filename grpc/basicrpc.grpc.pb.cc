// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: basicrpc.proto

#include "basicrpc.pb.h"
#include "basicrpc.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace basicrpc {

static const char* Executor_method_names[] = {
  "/basicrpc.Executor/ZeroFile",
  "/basicrpc.Executor/GeneralRequest",
};

std::unique_ptr< Executor::Stub> Executor::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Executor::Stub> stub(new Executor::Stub(channel));
  return stub;
}

Executor::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ZeroFile_(Executor_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GeneralRequest_(Executor_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Executor::Stub::ZeroFile(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::basicrpc::ZeroReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ZeroFile_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::basicrpc::ZeroReply>* Executor::Stub::AsyncZeroFileRaw(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::basicrpc::ZeroReply>::Create(channel_.get(), cq, rpcmethod_ZeroFile_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::basicrpc::ZeroReply>* Executor::Stub::PrepareAsyncZeroFileRaw(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::basicrpc::ZeroReply>::Create(channel_.get(), cq, rpcmethod_ZeroFile_, context, request, false);
}

::grpc::Status Executor::Stub::GeneralRequest(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::basicrpc::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GeneralRequest_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::basicrpc::Reply>* Executor::Stub::AsyncGeneralRequestRaw(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::basicrpc::Reply>::Create(channel_.get(), cq, rpcmethod_GeneralRequest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::basicrpc::Reply>* Executor::Stub::PrepareAsyncGeneralRequestRaw(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::basicrpc::Reply>::Create(channel_.get(), cq, rpcmethod_GeneralRequest_, context, request, false);
}

Executor::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Executor_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Executor::Service, ::basicrpc::ZeroRequest, ::basicrpc::ZeroReply>(
          std::mem_fn(&Executor::Service::ZeroFile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Executor_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Executor::Service, ::basicrpc::Request, ::basicrpc::Reply>(
          std::mem_fn(&Executor::Service::GeneralRequest), this)));
}

Executor::Service::~Service() {
}

::grpc::Status Executor::Service::ZeroFile(::grpc::ServerContext* context, const ::basicrpc::ZeroRequest* request, ::basicrpc::ZeroReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Executor::Service::GeneralRequest(::grpc::ServerContext* context, const ::basicrpc::Request* request, ::basicrpc::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace basicrpc

