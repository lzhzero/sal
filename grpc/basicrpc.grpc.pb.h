// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: basicrpc.proto
#ifndef GRPC_basicrpc_2eproto__INCLUDED
#define GRPC_basicrpc_2eproto__INCLUDED

#include "basicrpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace basicrpc {

// The greeting service definition.
class Executor final {
 public:
  static constexpr char const* service_full_name() {
    return "basicrpc.Executor";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status ZeroFile(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::basicrpc::ZeroReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basicrpc::ZeroReply>> AsyncZeroFile(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basicrpc::ZeroReply>>(AsyncZeroFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basicrpc::ZeroReply>> PrepareAsyncZeroFile(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basicrpc::ZeroReply>>(PrepareAsyncZeroFileRaw(context, request, cq));
    }
    virtual ::grpc::Status GeneralRequest(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::basicrpc::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basicrpc::Reply>> AsyncGeneralRequest(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basicrpc::Reply>>(AsyncGeneralRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basicrpc::Reply>> PrepareAsyncGeneralRequest(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basicrpc::Reply>>(PrepareAsyncGeneralRequestRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::basicrpc::ZeroReply>* AsyncZeroFileRaw(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::basicrpc::ZeroReply>* PrepareAsyncZeroFileRaw(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::basicrpc::Reply>* AsyncGeneralRequestRaw(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::basicrpc::Reply>* PrepareAsyncGeneralRequestRaw(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ZeroFile(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::basicrpc::ZeroReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basicrpc::ZeroReply>> AsyncZeroFile(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basicrpc::ZeroReply>>(AsyncZeroFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basicrpc::ZeroReply>> PrepareAsyncZeroFile(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basicrpc::ZeroReply>>(PrepareAsyncZeroFileRaw(context, request, cq));
    }
    ::grpc::Status GeneralRequest(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::basicrpc::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basicrpc::Reply>> AsyncGeneralRequest(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basicrpc::Reply>>(AsyncGeneralRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basicrpc::Reply>> PrepareAsyncGeneralRequest(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basicrpc::Reply>>(PrepareAsyncGeneralRequestRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::basicrpc::ZeroReply>* AsyncZeroFileRaw(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::basicrpc::ZeroReply>* PrepareAsyncZeroFileRaw(::grpc::ClientContext* context, const ::basicrpc::ZeroRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::basicrpc::Reply>* AsyncGeneralRequestRaw(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::basicrpc::Reply>* PrepareAsyncGeneralRequestRaw(::grpc::ClientContext* context, const ::basicrpc::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ZeroFile_;
    const ::grpc::internal::RpcMethod rpcmethod_GeneralRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status ZeroFile(::grpc::ServerContext* context, const ::basicrpc::ZeroRequest* request, ::basicrpc::ZeroReply* response);
    virtual ::grpc::Status GeneralRequest(::grpc::ServerContext* context, const ::basicrpc::Request* request, ::basicrpc::Reply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ZeroFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ZeroFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ZeroFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZeroFile(::grpc::ServerContext* context, const ::basicrpc::ZeroRequest* request, ::basicrpc::ZeroReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZeroFile(::grpc::ServerContext* context, ::basicrpc::ZeroRequest* request, ::grpc::ServerAsyncResponseWriter< ::basicrpc::ZeroReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GeneralRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GeneralRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GeneralRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneralRequest(::grpc::ServerContext* context, const ::basicrpc::Request* request, ::basicrpc::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGeneralRequest(::grpc::ServerContext* context, ::basicrpc::Request* request, ::grpc::ServerAsyncResponseWriter< ::basicrpc::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ZeroFile<WithAsyncMethod_GeneralRequest<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ZeroFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ZeroFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ZeroFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZeroFile(::grpc::ServerContext* context, const ::basicrpc::ZeroRequest* request, ::basicrpc::ZeroReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GeneralRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GeneralRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GeneralRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneralRequest(::grpc::ServerContext* context, const ::basicrpc::Request* request, ::basicrpc::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ZeroFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ZeroFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::basicrpc::ZeroRequest, ::basicrpc::ZeroReply>(std::bind(&WithStreamedUnaryMethod_ZeroFile<BaseClass>::StreamedZeroFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ZeroFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ZeroFile(::grpc::ServerContext* context, const ::basicrpc::ZeroRequest* request, ::basicrpc::ZeroReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedZeroFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::basicrpc::ZeroRequest,::basicrpc::ZeroReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GeneralRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GeneralRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::basicrpc::Request, ::basicrpc::Reply>(std::bind(&WithStreamedUnaryMethod_GeneralRequest<BaseClass>::StreamedGeneralRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GeneralRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GeneralRequest(::grpc::ServerContext* context, const ::basicrpc::Request* request, ::basicrpc::Reply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGeneralRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::basicrpc::Request,::basicrpc::Reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ZeroFile<WithStreamedUnaryMethod_GeneralRequest<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ZeroFile<WithStreamedUnaryMethod_GeneralRequest<Service > > StreamedService;
};

}  // namespace basicrpc


#endif  // GRPC_basicrpc_2eproto__INCLUDED
